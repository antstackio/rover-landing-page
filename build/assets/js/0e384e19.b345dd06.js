"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return n?o.createElement(y,l(l({ref:t},u),{},{components:n})):o.createElement(y,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},l="Quickstart",i={unversionedId:"intro",id:"intro",title:"Quickstart",description:"Here we Go with Rover \ud83d\ude0e ....",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"#/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"S3 Lambda",permalink:"/docs/Components/S3 Lambda"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:2},{value:"Start with the Rover:",id:"start-with-the-rover",level:2},{value:"To generate SAM Project",id:"to-generate-sam-project",level:3},{value:"Note: currently the add module feature is in progress",id:"note-currently-the-add-module-feature-is-in-progress",level:4},{value:"To deploy SAM Project",id:"to-deploy-sam-project",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"Here we Go with Rover \ud83d\ude0e ...."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Rover is a backend automation package that generates SAM projects based on predefined modules and components. And helps in deploying  SAM project through CLI or generate CI/CD Pipeline. It has a set of predefined modules and components which are commonly used."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Rover is a CLI package designed using typescript that supports Node and Python with some of the serverless AWS Services."),(0,r.kt)("p",null,"To Install:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"}," npm install @rover-tools/cli -g\n")),(0,r.kt)("h2",{id:"start-with-the-rover"},"Start with the Rover:"),(0,r.kt)("h3",{id:"to-generate-sam-project"},"To generate SAM Project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"rover init\n")),(0,r.kt)("p",null,"on ",(0,r.kt)("inlineCode",{parentName:"p"},"rover init")," you will get 3 choices one to create a new sam project and others to add components or modules to existing project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Hey, what do you want ? \n  1) create new SAM project\n  2) add components to existing SAM\n  3) add modules to existing SAM\n  Answer: 1\n")),(0,r.kt)("p",null,"on selecting the first choice you have to give project name, language  and have to select the modules to be in the project."),(0,r.kt)("h4",{id:"note-currently-the-add-module-feature-is-in-progress"},"Note: currently the add module feature is in progress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Hey, what do you want ? create new SAM project\n? App Name: test\n? Choose your language : Node\n? Module Type : Base Module : It\u2019s a module with 2 stacks and 2 lambdas in each stack \n? Do you want to add one more modules ?  No\n\n")),(0,r.kt)("p",null,"you can have multiple modules in the project.\nThis is example of a project with a base component and a CRUD module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Hey, what do you want ? create new SAM project\n? App Name: test\n? Choose your language Node\n? Module Type : Base Module : It\u2019s a module with 2 stacks and 2 lambdas in each stack \n? Do you want to add one more modules ?  Yes\n? Module Type : CRUD : CRUD APIs\n? API Name : book\n? API Path(e.g /book) : /book\n? Please select your Methods : put, get, post, delete\n? Do you want to add another API ? No\n? Do you want to add one more modules ?  No\n")),(0,r.kt)("h3",{id:"to-deploy-sam-project"},"To deploy SAM Project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"rover deploy\n")),(0,r.kt)("p",null,"on ",(0,r.kt)("inlineCode",{parentName:"p"},"rover deploy")," you will get 3 choices"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One to generate CI/CD pipeline"),(0,r.kt)("li",{parentName:"ul"},"Deploy through CLI"),(0,r.kt)("li",{parentName:"ul"},"Deploy by pushing to repository")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"? Deploy through: \n  1) generate pipeline\n  2) cli\n  3) repository and pipeline\n  Answer: 1\n\n")),(0,r.kt)("p",null,"Generating pipeline requires some mandatory information like repository access , repo tool , branches  , deployment region and event/trigger to deploy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"? Deploy through: generate pipeline\n? Repo Type: public\n? Tools: GitHub\n? Please enter the required number of environments/branch you want ? 1\n? Envrionment 1 : dev\n? Please select your Steps required for dev environment  : build, deploy\n? Stack Name(optional) --\x3e dev : \n? Deployment Bucket(optional) --\x3e dev : \n? Deployment Region : ap-south-1\n? Deployment Parameter(optional) --\x3e dev : \n? Please select your Deployment events : push\n")),(0,r.kt)("p",null,"or we can directly deploy by giving deployment region where this deployed using SAM CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"? Deploy through: cli\n? Stack Name(optional) : \n? Bucket Name(optional) : \n? Deployment region: ap-south-1\n")))}c.isMDXComponent=!0}}]);